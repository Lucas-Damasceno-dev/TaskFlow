# ===========================
# BACKEND - JAVA / SPRING BOOT
# ===========================
# Pastas de output de build (Maven e Gradle)
target/
build/

# Arquivos compilados (para segurança, caso estejam fora das pastas de build)
*.class
*.jar
*.war
*.ear

# Arquivos específicos do Maven
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties

# Arquivos específicos do Gradle
.gradle/
.gradle-cache/
# Não ignore o wrapper do Gradle, ele garante builds consistentes
!gradle/wrapper/gradle-wrapper.jar

# Logs
logs/
*.log
*.out

# ===========================
# FRONTEND - ANGULAR / NODE
# ===========================
# Dependências
node_modules/
.npm/
.yarn/

# Arquivos de build e temporários
frontend/dist/
frontend/tmp/
frontend/out-tsc/
frontend/.angular/
frontend/.angular-cache/

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Arquivos de ambiente local (nunca devem ser versionados)
.env
.env.*.local

# NOTA: package-lock.json e yarn.lock GERALMENTE DEVEM ser versionados
# em projetos de aplicação para garantir builds determinísticos.
# Removi as regras que os ignoravam.

# ===========================
# OS-SPECIFIC FILES
# ===========================
.DS_Store
Thumbs.db

# ===========================
# IDE / EDITORS
# ===========================
.idea/
.vscode/
*.iml
*.iws
*.ipr
*.swp
*.swo
*~

# ===========================
# DOCKER
# ===========================
# Ignora arquivos e pastas do Docker em qualquer lugar do projeto
**/.docker/
**/docker-compose.override.yml
**/docker-compose.override.yaml
.dockerignore

# Docker volumes e dados locais
**/data/
**/volumes/

# ===========================
# POSTGRESQL (if using local volumes)
# ===========================
pgdata/
postgres-data/
*.sql~
*.dump
*.backup

# ===========================
# TEST / REPORTS / TEMP
# ===========================
coverage/
lcov-report/
test-output/
jacoco.exec
*.lcov
*.exec
*.bak
*.tmp
*.temp
*.orig
*.rej
*.old